use rand::Rng;

/// Função para calcular o máximo divisor comum (MDC)
fn gcd(a: u128, b: u128) -> u128 {
    if b == 0 {
        a
    } else {
        gcd(b, a % b)
    }
}

/// Função para calcular o inverso modular (d tal que e*d ≡ 1 mod φ)
fn mod_inverse(e: u128, phi: u128) -> u128 {
    let (mut t, mut new_t) = (0i128, 1i128);
    let (mut r, mut new_r) = (phi as i128, e as i128);

    while new_r != 0 {
        let quotient = r / new_r;
        (t, new_t) = (new_t, t - quotient * new_t);
        (r, new_r) = (new_r, r - quotient * new_r);
    }

    if t < 0 {
        t += phi as i128;
    }

    t as u128
}

/// Teste simples de primalidade (não otimizado, mas suficiente para fins didáticos)
fn is_prime(n: u128) -> bool {
    if n <= 1 {
        return false;
    }
    if n <= 3 {
        return true;
    }
    if n % 2 == 0 {
        return false;
    }
    let mut i = 3;
    while i * i <= n {
        if n % i == 0 {
            return false;
        }
        i += 2;
    }
    true
}

/// Gera um número primo aleatório de determinado intervalo
fn generate_prime(min: u128, max: u128) -> u128 {
    let mut rng = rand::thread_rng();
    loop {
        let candidate = rng.gen_range(min..max);
        if is_prime(candidate) {
            return candidate;
        }
    }
}

/// Exponenciação modular rápida
fn mod_pow(mut base: u128, mut exp: u128, modulus: u128) -> u128 {
    if modulus == 1 {
        return 0;
    }
    let mut result = 1u128;
    base = base % modulus;
    while exp > 0 {
        if exp % 2 == 1 {
            result = (result * base) % modulus;
        }
        exp >>= 1;
        base = (base * base) % modulus;
    }
    result
}

/// Função principal RSA
fn main() {
    // 1️⃣ Geração de chaves
    let p = generate_prime(1000, 5000);
    let q = generate_prime(1000, 5000);
    let n = p * q;
    let phi = (p - 1) * (q - 1);
    let e = 65537u128; // valor comum

    // Garante que e e phi sejam coprimos
    if gcd(e, phi) != 1 {
        println!("Erro: e e φ(n) não são coprimos");
        return;
    }

    let d = mod_inverse(e, phi);

    println!("🔑 Chave pública: (n = {}, e = {})", n, e);
    println!("🔒 Chave privada: (d = {})", d);

    // 2️⃣ Mensagem original
    let message: u128 = 42;
    println!("\n📩 Mensagem original: {}", message);

    // 3️⃣ Criptografia: C = M^e mod n
    let cipher = mod_pow(message, e, n);
    println!("🧮 Mensagem criptografada: {}", cipher);

    // 4️⃣ Descriptografia: M = C^d mod n
    let decrypted = mod_pow(cipher, d, n);
    println!("✅ Mensagem descriptografada: {}", decrypted);
}

